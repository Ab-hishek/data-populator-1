# This manifest is autogenerated via `make manifests` command
# Do the modification to the data-populator.yaml or rsync-populator in
# directory deploy/yamls/ and then run `make manifests` command

# This manifest deploys the data populator components,
# with associated CRs & RBAC rules.



###############################################
###########                        ############
###########   DataPopulator CRD    ############
###########                        ############
###############################################

# DataPopulator CRD is autogenerated via `make manifests` command.
# Do the modification in the code and run the `make manifests` command
# to generate the CRD definition

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.5.0
  creationTimestamp: null
  name: datapopulators.openebs.io
spec:
  group: openebs.io
  names:
    kind: DataPopulator
    listKind: DataPopulatorList
    plural: datapopulators
    singular: datapopulator
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DataPopulator contains information used for populating volume from a given to a desired destination
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec contains details of rsync source/ rsync daemon. Rsync client will use these information to get the data for the volume.
            properties:
              destinationPVC:
                description: DestinationPVC is new PVC name. it will be created in openebs- namespace
                properties:
                  accessModes:
                    description: 'AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                    items:
                      type: string
                    type: array
                  dataSource:
                    description: 'This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  dataSourceRef:
                    description: 'Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  resources:
                    description: 'Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                    properties:
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  selector:
                    description: A label query over volumes to consider for binding.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                        type: object
                    type: object
                  storageClassName:
                    description: 'Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                    type: string
                  volumeMode:
                    description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                    type: string
                  volumeName:
                    description: VolumeName is the binding reference to the PersistentVolume backing this claim.
                    type: string
                type: object
              sourcePVC:
                description: SourcePVC is name of the PVC that we want to copy data from
                type: string
              sourcePVCNamespace:
                description: SourcePVCNamespace is namespace of the PVC that we want to copy
                type: string
            required:
            - destinationPVC
            - sourcePVC
            - sourcePVCNamespace
            type: object
          status:
            description: DataPopulatorStatus contains status of volume copy
            properties:
              message:
                type: string
              state:
                type: string
            required:
            - message
            - state
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []


###############################################
###########                        ############
###########   RsyncPopulator CRD   ############
###########                        ############
###############################################

# RsyncPopulator CRD is autogenerated via `make manifests` command.
# Do the modification in the code and run the `make manifests` command
# to generate the CRD definition

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.5.0
  creationTimestamp: null
  name: rsyncpopulators.openebs.io
spec:
  group: openebs.io
  names:
    kind: RsyncPopulator
    listKind: RsyncPopulatorList
    plural: rsyncpopulators
    singular: rsyncpopulator
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: RsyncPopulator is a volume populator that helps to create a volume from any rsync source.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RsyncPopulatorSpec contains the information of rsync daemon.
            properties:
              password:
                description: Password is used as credential to access rsync daemon by the client.
                type: string
              path:
                description: Path represent mount path of the volume which we want to sync by the client.
                type: string
              url:
                description: URL is rsync daemon url it can be dns can be ip:port. Client will use it to connect and get the data from daemon.
                type: string
              username:
                description: Username is used as credential to access rsync daemon by the client.
                type: string
            required:
            - password
            - path
            - url
            - username
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---

# Create the OpenEBS data-population namespace
apiVersion: v1
kind: Namespace
metadata:
  name: openebs-data-population
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: data-populator
  namespace: openebs-data-population
  labels:
    openebs.io/name: data-populator
    openebs.io/role: volume-populator
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: data-populator
  labels:
    openebs.io/name: data-populator
    openebs.io/role: volume-populator
rules:
  - apiGroups: [""]
    resources: [persistentvolumeclaims]
    verbs: [get, create, delete]
  - apiGroups: [""]
    resources: [pods]
    verbs: [get, create, delete]
  - apiGroups: [""]
    resources: [configmaps]
    verbs: [get, create, delete]
  - apiGroups: [""]
    resources: [services]
    verbs: [get, create, delete]

  - apiGroups: ["storage.k8s.io"]
    resources: [storageclasses]
    verbs: [get]

  - apiGroups: [openebs.io]
    resources: [rsyncpopulators]
    verbs: [get, delete, create]
  - apiGroups: [openebs.io]
    resources: [datapopulators]
    verbs: [get, watch, list, update]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: data-populator
  labels:
    openebs.io/name: data-populator
    openebs.io/role: volume-populator
subjects:
  - kind: ServiceAccount
    name: data-populator
    namespace: openebs-data-population
roleRef:
  kind: ClusterRole
  name: data-populator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-populator
  namespace: openebs-data-population
  labels:
    openebs.io/app: data-populator
    openebs.io/name: data-populator
    openebs.io/role: volume-populator
spec:
  serviceName: data-populator
  replicas: 1
  selector:
    matchLabels:
      openebs.io/app: data-populator
      openebs.io/name: data-populator
      openebs.io/role: volume-populator
  template:
    metadata:
      labels:
        openebs.io/app: data-populator
        openebs.io/name: data-populator
        openebs.io/role: volume-populator
    spec:
      serviceAccount: data-populator
      containers:
        - name: data-populator
          image: abhishek09dh/data-populator:v0.1
          imagePullPolicy: Always
          command:
            - data-populator
          args:
            - --v=2

---

# Create the OpenEBS data-population namespace
apiVersion: v1
kind: Namespace
metadata:
  name: openebs-data-population
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rsync-populator
  namespace: openebs-data-population
  labels:
    openebs.io/name: rsync-populator
    openebs.io/role: volume-populator
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rsync-populator
  labels:
    openebs.io/name: rsync-populator
    openebs.io/role: volume-populator
rules:
  - apiGroups: [""]
    resources: [persistentvolumes]
    verbs: [get, list, watch, patch]
  - apiGroups: [""]
    resources: [persistentvolumeclaims]
    verbs: [get, list, watch, patch, create, delete]
  - apiGroups: [""]
    resources: [pods]
    verbs: [get, list, watch, create, delete]
  - apiGroups: [storage.k8s.io]
    resources: [storageclasses]
    verbs: [get, list, watch]

  - apiGroups: [openebs.io]
    resources: [rsyncpopulators]
    verbs: [get, list, watch]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rsync-populator
  labels:
    demo.io/name: rsync-populator
    demo.io/role: volume-populator
subjects:
  - kind: ServiceAccount
    name: rsync-populator
    namespace: openebs-data-population
roleRef:
  kind: ClusterRole
  name: rsync-populator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rsync-populator
  namespace: openebs-data-population
  labels:
    openebs.io/app: rsync-populator
    openebs.io/name: rsync-populator
    openebs.io/role: volume-populator
spec:
  serviceName: rsync-populator
  replicas: 1
  selector:
    matchLabels:
      openebs.io/app: rsync-populator
      openebs.io/name: rsync-populator
      openebs.io/role: volume-populator
  template:
    metadata:
      labels:
        openebs.io/app: rsync-populator
        openebs.io/name: rsync-populator
        openebs.io/role: volume-populator
    spec:
      serviceAccount: rsync-populator
      containers:
        - name: rsync-populator
          image: abhishek09dh/rsync-populator:v0.1
          imagePullPolicy: Always
          command:
            - rsync-populator
          args:
            - --v=2
            - --image-name=abhishek09dh/rsync-client:v0.1
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
